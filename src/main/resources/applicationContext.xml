<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.3.xsd">
<!--    引入外部的配置文件-->
    <context:property-placeholder location="classpath:dbconfig"></context:property-placeholder>
<!--    这里最主要配置业务和逻辑有关的(数据源与业务逻辑有关的)-->
        <bean id="pooledDataSource"
              class="com.mchange.v2.c3p0.ComboPooledDataSource">
            <property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
            <property name="driverClass" value="${jdbc.driverClass}"></property>
            <property name="user" value="${jdbc.user}"></property>
            <property name="password" value="${jdbc.password}"></property>
        </bean>
<!--    扫描-->
    <context:component-scan base-package="com.SSM">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
<!--    配置MyBatis和Spring的整合-->
    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">
<!--        配置MyBatis全局配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="dataSource" ref="pooledDataSource"></property>
<!--        指定MyBatis的mapper文件的位置-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>
<!--    配置扫描器，将MyBatis接口的实现加入到IOC容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
<!--        扫描所有的dao接口的实现,加入到IOC容器中-->
        <property name="basePackage" value="com.SSM.dao"></property>
    </bean>
<!--    事务控制的配置-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
<!--        控制住数据源-->
        <property name="dataSource" ref="pooledDataSource"></property>
    </bean>
<!--    开启基于注解的事务-->
    <aop:config>
<!--        切入点表达式-->
        <aop:pointcut id="txPointcut" expression="execution(* com.SSM.service..*(..))"/>
<!--        配置事务的增强-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"></aop:advisor>
    </aop:config>
<!--    配置事务增强器,事务如何切入-->
    <tx:advice id="txAdvice">
        <tx:attributes>
<!--            所有方法都是事务方法-->
            <tx:method name="*"></tx:method>
<!--            以get开始的所有方法都是事务方法-->
<!--            <tx:method name="get*" read-only="true"></tx:method>-->
        </tx:attributes>
    </tx:advice>
<!--    配置一个可以执行批量的SqlSession-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>
</beans>